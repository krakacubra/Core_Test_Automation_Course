package test.java.penTest;

import main.java.pen.Pen;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

public class PenTest {
    Pen pen;
    Pen anotherPen;
    Pen thirdPen;
    Pen penWithoutPrice;
    Pen expensivePen;
    String stringPen;
    Pen redPen;
    Pen erichKrauserPen;
    Pen emptyPen;
    @Before
    public void setUp(){
        emptyPen = new Pen();
        pen = new Pen("Parker", 12,12,12, 34.4F);
        anotherPen = new Pen ("Parker", 12,12,12, 34.4F);
        thirdPen = new Pen("Parker", 12,12,12, 34.4F);
        penWithoutPrice = new Pen("Parker", 12,12,12);
        expensivePen = new Pen("Parker", 12,12,12, 44.4F);
        redPen = new Pen("Parker", 12,0,0, 34.4F);
        erichKrauserPen = new Pen("ErichKrauser", 12,0,0, 34.4F);
    }
    /**
     *
     * Tests for method toString in Pen
     *
     * */
    @Test
    public void penToStringMustPrintNecessaryString(){
        assertEquals("main.java.pen.Pen@ price: 34.4, Brand: Parker, color: 12, 12, 12", pen.toString());
        assertEquals("main.java.pen.Pen@ price: 0.0, Brand: null, color: 0, 0, 0", emptyPen.toString());
        assertEquals("main.java.pen.Pen@ price: 0.0, Brand: Parker, color: 12, 12, 12", penWithoutPrice.toString());
    }
    /**
     *
     * Tests for method equals in Pen
     *
     * */
    @Test
    public void penMustBeEqualToItself(){
        assertTrue(pen.equals(pen));
    }
    @Test
    public void penEqualsMustBeSymmetric(){
        assertTrue(pen.equals(anotherPen));
        assertTrue(anotherPen.equals(pen));
    }
    @Test
    public void penEqualsMustBeTransitive(){
        assertTrue(pen.equals(anotherPen));
        assertTrue(anotherPen.equals(thirdPen));
        assertTrue(thirdPen.equals(pen));
    }
    @Test
    public void penEqualWithNullMustReturnFalse(){
        assertFalse(pen.equals(null));
    }
    @Test
    public void penEqualsMustReturnFalseIfPricesIsDifferent(){
        assertFalse(pen.equals(expensivePen));
    }
    @Test
    public void penEqualsMustReturnFalseWhenCompareWithNonpenObject(){
        assertFalse(pen.equals(stringPen));
    }
    @Test
    public void penEqualsReturnFalseIfColorDifferent(){
        assertFalse(pen.equals(redPen));
    }
    @Test
    public void penEqualsReturnFalseIfDifferentBrand(){
        assertFalse(pen.equals(erichKrauserPen));
    }

}
